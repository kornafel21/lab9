openapi: 3.0.3
info:
  title: Swagger Article - OpenAPI 3.0
  description: |-
    This is an API for Article application.
  version: 1.0.1
tags:
  - name: user
    description: Operations about user
  - name: article
    description: Everything about articles
  - name: change
    description: Manage changes of the articles
  - name: review
    description: Manage reviews of the changes
  
paths:
  /user:
    post:
      tags:
        - user
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      requestBody:
        $ref: '#/components/requestBodies/UserCreate'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Not valid input data 
  /user/login:
    get:
      tags:
        - user
      summary: Logs user into the system
      description: ''
      operationId: loginUser
      parameters:
        - name: username
          in: query
          description: The user name for login
          required: false
          schema:
            type: string
        - name: password
          in: query
          description: The password for login in clear text
          required: false
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/xml:
              schema:
                type: string
            application/json:
              schema:
                type: string
        '400':
          description: Invalid username/password supplied
  /user/logout:
    get:
      tags:
        - user
      summary: Logs out current logged in user session
      description: ''
      operationId: logoutUser
      parameters: []
      responses:
        '403':
          description: Unathorized
        '200':
          description: successful operation
      security:
        - article_auth:
          - admin
          - moderator
          - user
  /user/{userId}:
    get:
      tags:
        - user
      summary: Get user by user id
      description: ''
      operationId: getUserById
      parameters:
        - name: userId
          in: path
          description: 'The name that needs to be fetched.'
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserInfo'
            application/xml:
              schema:
                $ref: '#/components/schemas/UserInfo'
        '400':
          description: Invalid username supplied
        '403':
          description: Not enough permissions
        '404':
          description: User not found
      security:
        - article_auth:
          - admin
          - moderator
          - user
    put:
      tags:
        - user
      summary: Update user
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
        - name: userId
          in: path
          description: name that need to be deleted
          required: true
          schema:
            type: integer
      requestBody:
        description: Update an existent user
        content:
          application/json:
            schema:
              type: object
              properties:
                firstName:
                  type: string
                  example: John
                lastName:
                  type: string
                  example: James
                email:
                  type: string
                  example: john@email.com
                password:
                  type: string
                  example: '12345'
                phone:
                  type: string
                  example: '12345'
                userStatus:
                  type: integer
                  description: User Status
                  format: int32
                  example: 1
              xml:
                name: user
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserInfo'
            application/xml:
              schema:
                $ref: '#/components/schemas/UserInfo'
        '403':
          description: Not enough permissions    
        '400':
          description: Invalid input
        '404':
          description: User not found
      security:
        - article_auth:
          - admin
          - moderator
          - user
    delete:
      tags:
        - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
        - name: userId
          in: path
          description: The name that needs to be deleted
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: successful operation
        '403':
          description: Not enough permissions
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
      security:
        - article_auth:
          - admin
          - moderator
          - user
  /user/changeStatus/{userId}:
    put:
      tags:
        - user
      summary: Update userStatus
      description: This can only be done by admin.
      operationId: updateStatusUser
      parameters:
        - name: userId
          in: path
          description: name that need to be deleted
          required: true
          schema:
            type: integer
      requestBody:
        description: Update an existent user`s status
        content:
          application/json:
            schema:
              type: object
              properties:
                userStatus:
                  type: integer
                  description: User Status
                  format: int32
                  example: 1
              xml:
                name: user
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserInfo'
            application/xml:
              schema:
                $ref: '#/components/schemas/UserInfo'
        '403':
          description: Not enough permissions    
        '400':
          description: Invalid input
        '404':
          description: User not found
      security:
        - article_auth:
          - admin
          - moderator
          - user

  /article:
    post:
      tags:
        - article
      summary: Add a new article to the site
      description: Add a new article to the site
      operationId: addArticle
      requestBody:
        $ref: '#/components/requestBodies/ArticleCreate'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Article'
            application/xml:
              schema:
                $ref: '#/components/schemas/Article'
        '403':
          description: Not enough permissions
        '400':
          description: Invalid input
      security:
        - article_auth:
            - admin
            - moderator
  /article/{articleId}:
    get:
      tags:
        - article
      summary: Find article by ID
      description: Returns single article
      operationId: getArticleById
      parameters:
        - name: articleId
          in: path
          description: ID of article to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Article'
            application/xml:
              schema:
                $ref: '#/components/schemas/Article'
        '400':
          description: Invalid ID supplied
        '404':
          description: Article not found
    put:
      tags:
        - article
      summary: Updates an article
      description: ''
      operationId: updateArticle
      parameters:
        - name: articleId
          in: path
          description: ID of article that needs to be updated
          required: true
          schema:
            type: integer
            format: int64
        - name: name
          in: query
          description: Name of article
          schema:
            type: string
        - name: text
          in: query
          description: New text of article
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
        '403':
          description: Not enough permissions
        '404':
          description: Article not found
        '400':
          description: Invalid input
      security:
        - article_auth:
            - admin
            - moderator
    delete:
      tags:
        - article
      summary: Deletes an article
      description: delete an article
      operationId: deleteArticle
      parameters:
        - name: articleId
          in: path
          description: Article id to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful operation
        '404':
          description: Article not found
        '403':
          description: Not enough permissions
        '400':
          description: Invalid article id
      security:
        - article_auth:
            - admin

  /change:
    post:
      tags:
        - change
      summary: Add a new change to the site
      description: Add a new change to the site
      operationId: addChange
      requestBody:
        $ref: '#/components/requestBodies/ChangeCreate'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Change'
            application/xml:
              schema:
                $ref: '#/components/schemas/Change'
        '403':
          description: Not enough permissions
        '404':
          description: Article not found
        '400':
          description: Invalid input
      security:
        - article_auth:
            - admin
            - moderator
            - user
  /change/{changeId}:
    get:
      tags:
        - change
      summary: Find change by ID. User proposer can access own changes. Moderator or admin can access all. 
      description: Returns single change
      operationId: getChangeById
      parameters:
        - name: changeId
          in: path
          description: ID of change to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Change'
            application/xml:
              schema:
                $ref: '#/components/schemas/Change'
        '400':
          description: Invalid ID supplied
        '404':
          description: Change not found
      security:
        - article_auth:
            - admin
            - moderator
            - user
            
    delete:
      tags:
        - change
      summary: Deletes a change
      description: delete a change and it`s review
      operationId: deleteChange
      parameters:
        - name: changeId
          in: path
          description: Change id to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful operation
        '404':
          description: Change not found
        '403':
          description: Not enough permissions
        '400':
          description: Invalid change id
      security:
        - article_auth:
            - admin
  /mychanges:
    get:
      tags:
        - change
      summary: Find all changes done by current user.
      description: Returns array of changes
      operationId: getUserChanges
      responses:
        '200':
          description: successful operation
          content:
            application\json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Change'
        '403':
          description: Unathorized
        '404':
          description: Changes not found
      security:
        - article_auth:
            - admin
            - moderator
            - user
  /changesInReview:
    get:
      tags:
        - change
      summary: Find all changes that need a review. 
      description: Returns array of changes
      operationId: getChangesInReview
      responses:
        '200':
          description: successful operation
          content:
            application\json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Change'
        '403':
          description: Unathorized
        '404':
          description: Changes not found
      security:
        - article_auth:
            - admin
            - moderator
  
  /review:
    post:
      tags:
        - review
      summary: Create review  
      description: This can only be done by moderator or admin. If verdict 1, change article text to newText of the change, increment version of the article, set change status accepted and set status of all changes with the same articleId and version to denied. Otherwise only set change status denied.
      operationId: createReview
      requestBody:
        $ref: '#/components/requestBodies/ReviewCreate'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Review'
            application/xml:
              schema:
                $ref: '#/components/schemas/Review'
        '404':
          description: Change not found
        '403':
          description: Unathorized
      security:
        - article_auth:
          - admin
          - moderator
  /review/{changeId}:
    get:
      tags:
        - review
      summary: Find review by changeID
      description: Returns single review, if user is a proposer of change or admin or moderator. 
      operationId: getReviewByChangeId
      parameters:
        - name: changeId
          in: path
          description: ID of change
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Review'
            application/xml:
              schema:
                $ref: '#/components/schemas/Review'
        '400':
          description: Invalid ID supplied
        '404':
          description: Review or change not found
      security:
        - article_auth:
          - admin
          - moderator
          - user
    put:
      tags:
        - review
      summary: Update review by changeID
      description: Only denied can be changed to accepted(doing action descripted, when accepting change as well) or comment can be changed. Can`t change accepted to denied, because changes in article had alredy been done. 
        Alert! Not recommended to be used as can revert new changes, that users done after this review.  
      operationId: updateReview
      parameters:
        - name: changeId
          in: path
          description: ID of review
          required: true
          schema:
            type: integer
            format: int64
        - name: verdict
          description: 0 if denied. 1 if accepted.
          in: query
          schema:
            type: integer
            format: int64
            example: 1
        - name: comment
          in: query
          schema:
            type: string
            example: All is done good. Accepted
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Review'
            application/xml:
              schema:
                $ref: '#/components/schemas/Review'
        '400':
          description: Invalid data supplied
        '404':
          description: Review not found
      security:
        - article_auth:
          - admin
          - moderator
          - user
  /myReviews:
    get:
      tags:
        - review
      summary: Get list of reviews done by user  
      description: Returns list of reviews done by user
      operationId: listReviewsDone
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items: 
                  $ref: '#/components/schemas/Review'
        '404':
          description: Reviews not found
        '403':
          description: Not enough permissions
      security:
        - article_auth:
          - admin
          - moderator
  /myChangesReviewed:
    get:
      tags:
        - review
      summary: Get list of reviews of changes done by user  
      description: Returns list of reviews of changes done by user
      operationId: listReviewsByChangesDone
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items: 
                  $ref: '#/components/schemas/Review'
        '404':
          description: Reviews not found
        '403':
          description: Unathorized
      security:
        - article_auth:
          - admin
          - moderator
          - user
       
components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        username:
          type: string
          example: theUser
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: James
        email:
          type: string
          example: john@email.com
        password:
          type: string
          example: '12345'
        phone:
          type: string
          example: '12345'
        userStatus:
          type: integer
          description: User Status
          format: int32
          example: 1
      xml:
        name: user
        
    Article:
      required:
        - id
        - name
        - text
        - version
        - creatorId
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        name:
          type: string
          example: Harry Potter
        text:
                type: string
                description: text of an arcticle
                example: "Harry Potter is a series of seven fantasy novels written by British author J. K. Rowling. The novels chronicle the lives of a young wizard, Harry Potter, and his friends Hermione Granger and Ron Weasley, all of whom are students at Hogwarts School of Witchcraft and Wizardry. The main story arc concerns Harry's conflict with Lord Voldemort, a dark wizard who intends to become immortal, overthrow the wizard governing body known as the Ministry of Magic and subjugate all wizards and Muggles (non-magical people)."
        version:
          type: integer
          format: int64
          example: 0
        creatorId:
          type: integer
          format: int64
          example: 4
      xml:
        name: article
    
    Change:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        articleId:
          type: integer
          format: int64
          example: 25
        articleVersion:
          type: integer
          format: int64
          example: 3
        oldText:
          type: string
          example: "Harry Potter is a series of seven fantasy novels written by British author J. K. Rowling. The novels chronicle the lives of a young wizard, Harry Potter, and his friends Hermione Granger and Ron Weasley, all of whom are students at Hogwarts School of Witchcraft and Wizardry. The main story arc concerns Harry's conflict with Lord Voldemort, a dark wizard who intends to become immortal, overthrow the wizard governing body known as the Ministry of Magic and subjugate all wizards and Muggles (non-magical people)."
        newText:
          type: string
          example: "Harry Potter is a series of seven fantasy novels written by British author J. K. Rowling. The novels chronicle the lives of a young wizard, Harry Potter, and his friends Hermione Granger and Ron Weasley, all of whom are students at Hogwarts School of Witchcraft and Wizardry. The main story arc concerns Harry's conflict with Lord Voldemort, a dark wizard who intends to become immortal, overthrow the wizard governing body known as the Ministry of Magic and subjugate all wizards and Muggles (non-magical people). It is my favorite series."
        status:
          type: string
          example: InReview
        proposerId:
          type: integer
          format: int64
          example: 2
      xml:
        name: change
      
    Review:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        changeId:
          type: integer
          format: int64
          example: 59
        verdict:
          type: integer
          format: int64
          example: 0
        comment:
          type: string
          example: Can`t accept this changes, because it has too many mistakes.
        reviewerId:
          type: integer
          format: int64
          example: 2
      xml:
        name: review  
    
    UserInfo:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        username:
          type: string
          example: theUser
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: James
        email:
          type: string
          example: john@email.com
        phone:
          type: string
          example: '12345'
        userStatus:
          type: integer
          description: User Status
          format: int32
          example: 1
      xml:
        name: user
  
  requestBodies:
        
    ChangeCreate:
      description: Create change object
      required: true
      content:
        application/json:
            schema:
              type: object
              properties:
                articleId:
                  type: integer
                  format: int64
                  example: 25
                newText:
                  type: string
                  example: "Harry Potter is a series of seven fantasy novels written by British author J. K. Rowling. The novels chronicle the lives of a young wizard, Harry Potter, and his friends Hermione Granger and Ron Weasley, all of whom are students at Hogwarts School of Witchcraft and Wizardry. The main story arc concerns Harry's conflict with Lord Voldemort, a dark wizard who intends to become immortal, overthrow the wizard governing body known as the Ministry of Magic and subjugate all wizards and Muggles (non-magical people). It is my favorite series."
              xml:
                name: change
                  
    UserCreate:
      description: Create user object
      required: true
      content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: theUser
                firstName:
                  type: string
                  example: John
                lastName:
                  type: string
                  example: James
                email:
                  type: string
                  example: john@email.com
                password:
                  type: string
                  example: '12345'
                phone:
                  type: string
                  example: '12345'
              xml:
                name: user
        
    ArticleCreate:
      description: Create a new article in the site
      required: true
      content:
        application/json:
          schema:
            required:
              - name
              - text
            type: object
            properties:
              name:
                type: string
                example: Harry Potter
              text:
                type: string
                description: text of an arcticle
                example: "Harry Potter is a series of seven fantasy novels written by British author J. K. Rowling. The novels chronicle the lives of a young wizard, Harry Potter, and his friends Hermione Granger and Ron Weasley, all of whom are students at Hogwarts School of Witchcraft and Wizardry. The main story arc concerns Harry's conflict with Lord Voldemort, a dark wizard who intends to become immortal, overthrow the wizard governing body known as the Ministry of Magic and subjugate all wizards and Muggles (non-magical people)."
            xml:
              name: article
  
    ReviewCreate:
      description: Create review object
      required: true
      content:
          application/json:
            schema:
              type: object
              properties:
                changeId:
                  type: integer
                  format: int64
                  example: 59
                verdict:
                  type: integer
                  format: int64
                  example: 0
                comment:
                  type: string
                  example: Can`t accept this changes, because it has too many mistakes.
              xml:
                name: review
  
  securitySchemes:
    article_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: url
          scopes:
            admin : can do all actions
            moderator : can do reviews
            user : can see articles, change own profile and create changes in articles 